using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System;
using System.Threading;

namespace SecretHitler {
    public static class GameManager {
        public enum SIZE { SML, MED, LGE};
        public static SIZE gameSize;

        public enum GAMESTATES { NOT_STARTED, SELECTING_CHAN, VOTING, PRES_POLICY, CHAN_POLICY, VETOING, PRES_POWERS, ENDED}
        public static GAMESTATES gameState = GAMESTATES.NOT_STARTED;

        private static PoliciesDeck policies = new PoliciesDeck();

        private static PlayerLogic[] players;

        private static int PrevPrez = -1;     // For selecting special elections and chancellor selection
        private static int CurrentPrez = -1;  // For Drawing cards
        private static int NextPrez = -1;     // For president cycle
        private static int PrevChan = -1;     // For selecting chancellor
        private static int CurrentChan = -1;  // For Passing cards

        /// <summary>
        /// Adds player to array of players, will fail if game has already started
        /// ID is autogenerated
        /// </summary>
        /// <param name="Name">Display name of player</param>
        /// <returns>Successfully added player</returns>
        public static bool AddPlayer(string Name) {
            if (gameState != GAMESTATES.NOT_STARTED) {
                PlayerLogic[] newPlayerList = new PlayerLogic[PlayerCount() + 1];
                for (int i = 0; i < PlayerCount(); i++) {
                    newPlayerList[i] = players[i];
                }
                newPlayerList[PlayerCount()] = new PlayerLogic(PlayerCount(), Name);
                players = newPlayerList;
                return true;
            } else {
                return false;
            }
        }

        /// <summary>
        /// Used once all players have joined lobby
        /// </summary>
        public static void GameStart() {
            int playercount = PlayerCount();
            if (playercount < 5)
                return; // Too few players
            else if (playercount < 7)
                gameSize = SIZE.SML;
            else if (playercount < 9)
                gameSize = SIZE.MED;
            else if (playercount < 11)
                gameSize = SIZE.LGE;
            else
                return; // Too many players

            int[] randomPlayers = new int[playercount];
            for(int i = 0; i < playercount; i++) {
                randomPlayers[i] = i;
            }
            randomPlayers.Shuffle();

            int pIndex = 0;
            //Set Hitler
            players[randomPlayers[pIndex]].Role = PlayerLogic.ROLES.Hitler;
            pIndex++;
            //Set fascists
            int numFascists = (playercount - 3) / 2;
            while (pIndex < numFascists) {
                players[randomPlayers[pIndex]].Role = PlayerLogic.ROLES.Fascist;
                pIndex++;
            }
            //Set remaining as Liberal
            while (pIndex < playercount) {
                players[randomPlayers[pIndex]].Role = PlayerLogic.ROLES.Liberal;
                pIndex++;
            }
            //Reset deck of cards
            policies = new PoliciesDeck();
            //Clear boards
            Boards.ClearAll();
            //Randomly select president
            System.Random rand = new System.Random();
            CurrentPrez = rand.Next(0, playercount - 1);
            SetNewNextPres(CurrentPrez+1);
            //No need to make users communicate roles, as info will be available on devices

            gameState = GAMESTATES.SELECTING_CHAN;
        }

        public static void Update() {
            switch (gameState) {
                case GAMESTATES.SELECTING_CHAN:
                    //Check if chancellor has been chosen
                    //Move to Voting
                    break;
                case GAMESTATES.VOTING:
                    //Check if all votes are in
                    
                    //Move to Pres_Policy if success
                    SetPres();
                    break;
                case GAMESTATES.PRES_POLICY:
                    //Check if Pres hand size is 2
                    //Move to Chan_Policy
                    break;
                case GAMESTATES.CHAN_POLICY:
                    //Check if Chan hand size is 1
                    //Move to Pres_Powers
                    break;
                case GAMESTATES.PRES_POWERS:
                    //Pres_Power should resolve self
                    break;
                default:
                    return;
                    break;
            }
        }

        private static void SetPres () {
            CurrentPrez = NextPrez;
            SetNewNextPres(CurrentPrez + 1);
            gameState = GAMESTATES.SELECTING_CHAN;
        }

        private static int SetNewNextPres(int nextPresID) {
            NextPrez = nextPresID % PlayerCount();
            return NextPrez;
        }

        public static int PlayerCount() {
            return players.Length;
        }
    }
}